//   Q1 .  maximum Subaaray solution kadane Algorithms
class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int currentSum = nums[0];
        for(int i =1;i<nums.length;i++){
            if(currentSum <0){
                currentSum =0; 
            }
            currentSum = currentSum +nums[i];
            if(currentSum>max){
                max = currentSum;
            }
        }
        return max;
    }
}

// Q2 Best time to buy and sell stock 
class Solution {
    public int maxProfit(int[] prices) {
        int min = prices[0];
        int ans = 0;
        for(int i =1;i<prices.length;i++){
            int profit = prices[i] - min;
            if(profit>ans){
                  ans = profit ;
            }
            min = Math.min(prices[i],min);
             
        }
         return ans;
      
    }
}

// Q3 Maximu Subarray Product
class Solution {
    public int maxProduct(int[] nums) {
        int maxProduct = nums[0];
        int minProduct = nums[0];
        int result = nums[0];
        for(int i = 1;i<nums.length;i++){
            if(nums[i]>=0){
                maxProduct = Math.max(nums[i],maxProduct*nums[i]);
                minProduct = Math.min(nums[i],minProduct*nums[i]);
            }
            else {
                int temp = maxProduct;
                maxProduct = Math.max(nums[i],maxProduct*nums[i]);
                 minProduct = Math.min(nums[i],temp*nums[i]);
            }
            result = Math.max(result,maxProduct);
           

        }
        return result;
    }
}
